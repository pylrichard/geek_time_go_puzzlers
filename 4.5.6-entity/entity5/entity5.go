// 不同代码块中的重名变量与变量重声明中的变量之间的区别
// 1 变量重声明中的变量一定是在某一个代码块内的。注意这里的"某一个代码块内"并不包含它的任何子代码块
//   否则就变成了"多个代码块之间"。而可重名变量指的正是在多个代码块之间的由相同的标识符代表的变量
// 2 变量重声明是对同一个变量的多次声明，这里的变量只有一个。而可重名变量中涉及的变量肯定是有多个
// 3 不论对变量重声明多少次，其类型必须始终一致，具体遵从它第一次被声明时给定的类型
//   而可重名变量之间不存在类似的限制，它们的类型可以是任意的
// 4 如果可重名变量所在的代码块之间存在直接或间接的嵌套关系，那么它们之间一定会存在"屏蔽"现象
//   但是这种现象绝对不会在变量重声明的场景下出现
// 不同类型的值大都有着不同的特性和用法。当在某一种类型的值上施加只有在其他类型值上才能做的操作时，Go语言编译器一定会报错
package main

import "fmt"

var container = []string{"zero", "one", "two"}

func main() {
	container := map[int]string{0: "zero", 1: "one", 2: "two"}

	// 如果container的类型不是数组、切片、字典类型，那么索引表达式就会引发编译错误，这正是利用Go语言语法约束程序的一个例子
	// 但是当想知道container确切类型时，利用索引表达式的方式就不够了
	// 当可重名变量的值被转换成某个接口类型值，或者它们的类型本身就是接口类型时，严格的类型检查就很有必要了
	fmt.Printf("The element is %q.\n", container[1])
}
